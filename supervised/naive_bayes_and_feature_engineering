{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO/tE/3MKCx7C8IYfmRxhZo",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dansarmiento/MachineLearning/blob/main/Naive_Bayes_%26_Feature_Engineering.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "In this workbook we are analyzing a subset of data that contains info about NBA players and their performance records.  We will do feature engineering to determine which features will most effectively predict whether an NBA career will last at least 5 years"
      ],
      "metadata": {
        "id": "9gogdgGZPwGl"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YngkaWIkOKoF"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# https://docs.google.com/spreadsheets/d/1GPpQ_lOn-OqvOlhRG2dywl9EOZXJQwCT6--zVveFFH4/edit?usp=sharing\n",
        "\n",
        "sheet_id = \"1GPpQ_lOn-OqvOlhRG2dywl9EOZXJQwCT6--zVveFFH4\"\n",
        "sheet_name = \"Sheet1\"\n",
        "\n",
        "gsheet_url = \"https://docs.google.com/spreadsheets/d/{}/gviz/tq?tqx=out:csv&sheet={}\".format(sheet_id,sheet_name)\n",
        "df = pd.read_csv(gsheet_url)\n",
        "df.columns = df.columns.str.lower().str.replace(' ', '_').str.replace('/','_')\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "id": "tpX27-2WPuye",
        "outputId": "78e76f56-d649-4594-fb83-4e8b9f3ddd70"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   unnamed:_0             name  gp   min  pts  fgm  fga    fg  3p_made  3pa  \\\n",
              "0           0   Brandon Ingram  36  27.4  7.4  2.6  7.6  34.7      0.5  2.1   \n",
              "1           1  Andrew Harrison  35  26.9  7.2  2.0  6.7  29.6      0.7  2.8   \n",
              "2           2   JaKarr Sampson  74  15.3  5.2  2.0  4.7  42.2      0.4  1.7   \n",
              "3           3      Malik Sealy  58  11.6  5.7  2.3  5.5  42.6      0.1  0.5   \n",
              "4           4      Matt Geiger  48  11.5  4.5  1.6  3.0  52.4      0.0  0.1   \n",
              "\n",
              "   ...  fta    ft  oreb  dreb  reb  ast  stl  blk  tov  target_5yrs  \n",
              "0  ...  2.3  69.9   0.7   3.4  4.1  1.9  0.4  0.4  1.3            0  \n",
              "1  ...  3.4  76.5   0.5   2.0  2.4  3.7  1.1  0.5  1.6            0  \n",
              "2  ...  1.3  67.0   0.5   1.7  2.2  1.0  0.5  0.3  1.0            0  \n",
              "3  ...  1.3  68.9   1.0   0.9  1.9  0.8  0.6  0.1  1.0            1  \n",
              "4  ...  1.9  67.4   1.0   1.5  2.5  0.3  0.3  0.4  0.8            1  \n",
              "\n",
              "[5 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3e319442-31ad-4353-a61a-c03684c54595\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>unnamed:_0</th>\n",
              "      <th>name</th>\n",
              "      <th>gp</th>\n",
              "      <th>min</th>\n",
              "      <th>pts</th>\n",
              "      <th>fgm</th>\n",
              "      <th>fga</th>\n",
              "      <th>fg</th>\n",
              "      <th>3p_made</th>\n",
              "      <th>3pa</th>\n",
              "      <th>...</th>\n",
              "      <th>fta</th>\n",
              "      <th>ft</th>\n",
              "      <th>oreb</th>\n",
              "      <th>dreb</th>\n",
              "      <th>reb</th>\n",
              "      <th>ast</th>\n",
              "      <th>stl</th>\n",
              "      <th>blk</th>\n",
              "      <th>tov</th>\n",
              "      <th>target_5yrs</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Brandon Ingram</td>\n",
              "      <td>36</td>\n",
              "      <td>27.4</td>\n",
              "      <td>7.4</td>\n",
              "      <td>2.6</td>\n",
              "      <td>7.6</td>\n",
              "      <td>34.7</td>\n",
              "      <td>0.5</td>\n",
              "      <td>2.1</td>\n",
              "      <td>...</td>\n",
              "      <td>2.3</td>\n",
              "      <td>69.9</td>\n",
              "      <td>0.7</td>\n",
              "      <td>3.4</td>\n",
              "      <td>4.1</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.4</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Andrew Harrison</td>\n",
              "      <td>35</td>\n",
              "      <td>26.9</td>\n",
              "      <td>7.2</td>\n",
              "      <td>2.0</td>\n",
              "      <td>6.7</td>\n",
              "      <td>29.6</td>\n",
              "      <td>0.7</td>\n",
              "      <td>2.8</td>\n",
              "      <td>...</td>\n",
              "      <td>3.4</td>\n",
              "      <td>76.5</td>\n",
              "      <td>0.5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.4</td>\n",
              "      <td>3.7</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>1.6</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>JaKarr Sampson</td>\n",
              "      <td>74</td>\n",
              "      <td>15.3</td>\n",
              "      <td>5.2</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4.7</td>\n",
              "      <td>42.2</td>\n",
              "      <td>0.4</td>\n",
              "      <td>1.7</td>\n",
              "      <td>...</td>\n",
              "      <td>1.3</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>1.7</td>\n",
              "      <td>2.2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>Malik Sealy</td>\n",
              "      <td>58</td>\n",
              "      <td>11.6</td>\n",
              "      <td>5.7</td>\n",
              "      <td>2.3</td>\n",
              "      <td>5.5</td>\n",
              "      <td>42.6</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>...</td>\n",
              "      <td>1.3</td>\n",
              "      <td>68.9</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.9</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0.1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>Matt Geiger</td>\n",
              "      <td>48</td>\n",
              "      <td>11.5</td>\n",
              "      <td>4.5</td>\n",
              "      <td>1.6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>52.4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.1</td>\n",
              "      <td>...</td>\n",
              "      <td>1.9</td>\n",
              "      <td>67.4</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.5</td>\n",
              "      <td>2.5</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.8</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã— 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3e319442-31ad-4353-a61a-c03684c54595')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3e319442-31ad-4353-a61a-c03684c54595 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3e319442-31ad-4353-a61a-c03684c54595');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-5ef1fbd9-2ea3-46db-8f7f-54b95aff4bf1\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5ef1fbd9-2ea3-46db-8f7f-54b95aff4bf1')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-5ef1fbd9-2ea3-46db-8f7f-54b95aff4bf1 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# look for missing values\n",
        "# nice and clean dataset\n",
        "df.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 774
        },
        "id": "Dhb1yE3-QL4Q",
        "outputId": "578e59ab-8e18-4421-f426-43da5db37d9d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "unnamed:_0     0\n",
              "name           0\n",
              "gp             0\n",
              "min            0\n",
              "pts            0\n",
              "fgm            0\n",
              "fga            0\n",
              "fg             0\n",
              "3p_made        0\n",
              "3pa            0\n",
              "3p             0\n",
              "ftm            0\n",
              "fta            0\n",
              "ft             0\n",
              "oreb           0\n",
              "dreb           0\n",
              "reb            0\n",
              "ast            0\n",
              "stl            0\n",
              "blk            0\n",
              "tov            0\n",
              "target_5yrs    0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>unnamed:_0</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pts</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fgm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fga</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fg</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3p_made</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3pa</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3p</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ftm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fta</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ft</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>oreb</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dreb</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reb</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ast</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>stl</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>blk</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tov</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>target_5yrs</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# check for balance in the target variable\n",
        "# this is more than good enough balance to go forward with\n",
        "df.target_5yrs.value_counts(normalize=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "iEG2yKOsQsnI",
        "outputId": "b0e063a2-eb21-46ef-8e13-cd6a67459001"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "target_5yrs\n",
              "1    0.620149\n",
              "0    0.379851\n",
              "Name: proportion, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>proportion</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>target_5yrs</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.620149</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.379851</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "| Column       | Description                                                  |\n",
        "|--------------|--------------------------------------------------------------|\n",
        "| name         | Name of NBA player                                           |\n",
        "| gp           | Number of games played                                       |\n",
        "| min          | Number of minutes played per game                            |\n",
        "| pts          | Average number of points per game                            |\n",
        "| fgm          | Average number of field goals made per game                  |\n",
        "| fga          | Average number of field goal attempts per game               |\n",
        "| fg           | Average percent of field goals made per game                 |\n",
        "| 3p_made      | Average number of three-point field goals made per game      |\n",
        "| 3pa          | Average number of three-point field goal attempts per game   |\n",
        "| 3p           | Average percent of three-point field goals made per game     |\n",
        "| ftm          | Average number of free throws made per game                  |\n",
        "| fta          | Average number of free throw attempts per game               |\n",
        "| ft           | Average percent of free throws made per game                 |\n",
        "| oreb         | Average number of offensive rebounds per game                |\n",
        "| dreb         | Average number of defensive rebounds per game                |\n",
        "| reb          | Average number of rebounds per game                          |\n",
        "| ast          | Average number of assists per game                           |\n",
        "| stl          | Average number of steals per game                            |\n",
        "| blk          | Average number of blocks per game                            |\n",
        "| tov          | Average number of turnovers per game                         |\n",
        "| target_5yrs  | 1 if career duration â‰¥ 5 years, 0 otherwise                  |\n"
      ],
      "metadata": {
        "id": "WjDN-hOJRhXi"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Selecting columns to use as features:\n",
        "- number of games a player has played in is correlated to longevity, but if we use this information in combination with other stats to create other features we might make something better\n",
        "- for example, games played * average points would make a total career points which would be an indicator of a successful player\n",
        "- minutes per game with games played could also be a good indication of overall player utilization\n",
        "- there are three different columns about field goals including field goal percentage, field goals made, and field goal attempts\n",
        "- there are also non-scoring stats for offensive and defensive rebounds along with assists, steals, blocks and turnovers\n",
        "\n",
        "we will move forward with: gp, min, pts, fg, 3p, ft, reb, ast, stl, blk, tov"
      ],
      "metadata": {
        "id": "uJ9179HHRmZl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = df[['gp', 'min', 'pts', 'fg', '3p', 'ft', 'reb', 'ast', 'stl', 'blk', 'tov', 'target_5yrs']]\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "V6pcDHTWRMdN",
        "outputId": "5abf4b43-cb76-46cf-df29-c3467cbf512c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   gp   min  pts    fg    3p    ft  reb  ast  stl  blk  tov  target_5yrs\n",
              "0  36  27.4  7.4  34.7  25.0  69.9  4.1  1.9  0.4  0.4  1.3            0\n",
              "1  35  26.9  7.2  29.6  23.5  76.5  2.4  3.7  1.1  0.5  1.6            0\n",
              "2  74  15.3  5.2  42.2  24.4  67.0  2.2  1.0  0.5  0.3  1.0            0\n",
              "3  58  11.6  5.7  42.6  22.6  68.9  1.9  0.8  0.6  0.1  1.0            1\n",
              "4  48  11.5  4.5  52.4   0.0  67.4  2.5  0.3  0.3  0.4  0.8            1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b8b9e395-178d-4b4b-96df-3d4534ac7133\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gp</th>\n",
              "      <th>min</th>\n",
              "      <th>pts</th>\n",
              "      <th>fg</th>\n",
              "      <th>3p</th>\n",
              "      <th>ft</th>\n",
              "      <th>reb</th>\n",
              "      <th>ast</th>\n",
              "      <th>stl</th>\n",
              "      <th>blk</th>\n",
              "      <th>tov</th>\n",
              "      <th>target_5yrs</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>36</td>\n",
              "      <td>27.4</td>\n",
              "      <td>7.4</td>\n",
              "      <td>34.7</td>\n",
              "      <td>25.0</td>\n",
              "      <td>69.9</td>\n",
              "      <td>4.1</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.4</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>35</td>\n",
              "      <td>26.9</td>\n",
              "      <td>7.2</td>\n",
              "      <td>29.6</td>\n",
              "      <td>23.5</td>\n",
              "      <td>76.5</td>\n",
              "      <td>2.4</td>\n",
              "      <td>3.7</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>1.6</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>74</td>\n",
              "      <td>15.3</td>\n",
              "      <td>5.2</td>\n",
              "      <td>42.2</td>\n",
              "      <td>24.4</td>\n",
              "      <td>67.0</td>\n",
              "      <td>2.2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>58</td>\n",
              "      <td>11.6</td>\n",
              "      <td>5.7</td>\n",
              "      <td>42.6</td>\n",
              "      <td>22.6</td>\n",
              "      <td>68.9</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0.1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>48</td>\n",
              "      <td>11.5</td>\n",
              "      <td>4.5</td>\n",
              "      <td>52.4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>67.4</td>\n",
              "      <td>2.5</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.8</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b8b9e395-178d-4b4b-96df-3d4534ac7133')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b8b9e395-178d-4b4b-96df-3d4534ac7133 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b8b9e395-178d-4b4b-96df-3d4534ac7133');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-67cddde4-3309-4648-9e43-06c6ac3eb102\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-67cddde4-3309-4648-9e43-06c6ac3eb102')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-67cddde4-3309-4648-9e43-06c6ac3eb102 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1340,\n  \"fields\": [\n    {\n      \"column\": \"gp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 11,\n        \"max\": 82,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          51,\n          36,\n          25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.307963702156531,\n        \"min\": 3.1,\n        \"max\": 40.9,\n        \"num_unique_values\": 325,\n        \"samples\": [\n          37.5,\n          21.2,\n          38.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.357544941826067,\n        \"min\": 0.7,\n        \"max\": 28.2,\n        \"num_unique_values\": 191,\n        \"samples\": [\n          10.2,\n          9.7,\n          22.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.137678873846979,\n        \"min\": 23.8,\n        \"max\": 73.7,\n        \"num_unique_values\": 284,\n        \"samples\": [\n          38.3,\n          25.0,\n          52.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"3p\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.051860729223097,\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 254,\n        \"samples\": [\n          10.5,\n          50.0,\n          29.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.578479425036832,\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 383,\n        \"samples\": [\n          50.7,\n          57.7,\n          38.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reb\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0577740415847043,\n        \"min\": 0.3,\n        \"max\": 13.9,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          7.0,\n          1.6,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ast\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4711691901022694,\n        \"min\": 0.0,\n        \"max\": 10.6,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          0.3,\n          2.0,\n          0.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stl\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4097586813504082,\n        \"min\": 0.0,\n        \"max\": 2.5,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          1.5,\n          1.7,\n          0.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"blk\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4290490953157915,\n        \"min\": 0.0,\n        \"max\": 3.9,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          1.5,\n          1.6,\n          1.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tov\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7225405379316505,\n        \"min\": 0.1,\n        \"max\": 4.4,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          3.3,\n          2.5,\n          0.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target_5yrs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gmlk_q3STs1g",
        "outputId": "2f92a22e-1140-4de6-d231-5eab110817f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1340 entries, 0 to 1339\n",
            "Data columns (total 13 columns):\n",
            " #   Column        Non-Null Count  Dtype  \n",
            "---  ------        --------------  -----  \n",
            " 0   gp            1340 non-null   int64  \n",
            " 1   min           1340 non-null   float64\n",
            " 2   pts           1340 non-null   float64\n",
            " 3   fg            1340 non-null   float64\n",
            " 4   3p            1340 non-null   float64\n",
            " 5   ft            1340 non-null   float64\n",
            " 6   reb           1340 non-null   float64\n",
            " 7   ast           1340 non-null   float64\n",
            " 8   stl           1340 non-null   float64\n",
            " 9   blk           1340 non-null   float64\n",
            " 10  tov           1340 non-null   float64\n",
            " 11  target_5yrs   1340 non-null   int64  \n",
            " 12  total_points  1340 non-null   float64\n",
            "dtypes: float64(11), int64(2)\n",
            "memory usage: 136.2 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# making columns for total points and efficiency\n",
        "\n",
        "df['total_points'] = df.gp * df.pts\n",
        "df['efficiency'] = df['total_points'] / (df['min'] * df['gp'])\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "skAUADRuTOSv",
        "outputId": "6054dc82-370d-4acf-d10a-e3a22be06f8a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   gp   min  pts    fg    3p    ft  reb  ast  stl  blk  tov  target_5yrs  \\\n",
              "0  36  27.4  7.4  34.7  25.0  69.9  4.1  1.9  0.4  0.4  1.3            0   \n",
              "1  35  26.9  7.2  29.6  23.5  76.5  2.4  3.7  1.1  0.5  1.6            0   \n",
              "2  74  15.3  5.2  42.2  24.4  67.0  2.2  1.0  0.5  0.3  1.0            0   \n",
              "3  58  11.6  5.7  42.6  22.6  68.9  1.9  0.8  0.6  0.1  1.0            1   \n",
              "4  48  11.5  4.5  52.4   0.0  67.4  2.5  0.3  0.3  0.4  0.8            1   \n",
              "\n",
              "   total_points  efficiency  \n",
              "0         266.4    0.270073  \n",
              "1         252.0    0.267658  \n",
              "2         384.8    0.339869  \n",
              "3         330.6    0.491379  \n",
              "4         216.0    0.391304  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2414e26a-3eb7-4868-b504-4dbdd83fad42\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gp</th>\n",
              "      <th>min</th>\n",
              "      <th>pts</th>\n",
              "      <th>fg</th>\n",
              "      <th>3p</th>\n",
              "      <th>ft</th>\n",
              "      <th>reb</th>\n",
              "      <th>ast</th>\n",
              "      <th>stl</th>\n",
              "      <th>blk</th>\n",
              "      <th>tov</th>\n",
              "      <th>target_5yrs</th>\n",
              "      <th>total_points</th>\n",
              "      <th>efficiency</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>36</td>\n",
              "      <td>27.4</td>\n",
              "      <td>7.4</td>\n",
              "      <td>34.7</td>\n",
              "      <td>25.0</td>\n",
              "      <td>69.9</td>\n",
              "      <td>4.1</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.4</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0</td>\n",
              "      <td>266.4</td>\n",
              "      <td>0.270073</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>35</td>\n",
              "      <td>26.9</td>\n",
              "      <td>7.2</td>\n",
              "      <td>29.6</td>\n",
              "      <td>23.5</td>\n",
              "      <td>76.5</td>\n",
              "      <td>2.4</td>\n",
              "      <td>3.7</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>1.6</td>\n",
              "      <td>0</td>\n",
              "      <td>252.0</td>\n",
              "      <td>0.267658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>74</td>\n",
              "      <td>15.3</td>\n",
              "      <td>5.2</td>\n",
              "      <td>42.2</td>\n",
              "      <td>24.4</td>\n",
              "      <td>67.0</td>\n",
              "      <td>2.2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>384.8</td>\n",
              "      <td>0.339869</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>58</td>\n",
              "      <td>11.6</td>\n",
              "      <td>5.7</td>\n",
              "      <td>42.6</td>\n",
              "      <td>22.6</td>\n",
              "      <td>68.9</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0.1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>330.6</td>\n",
              "      <td>0.491379</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>48</td>\n",
              "      <td>11.5</td>\n",
              "      <td>4.5</td>\n",
              "      <td>52.4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>67.4</td>\n",
              "      <td>2.5</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.8</td>\n",
              "      <td>1</td>\n",
              "      <td>216.0</td>\n",
              "      <td>0.391304</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2414e26a-3eb7-4868-b504-4dbdd83fad42')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2414e26a-3eb7-4868-b504-4dbdd83fad42 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2414e26a-3eb7-4868-b504-4dbdd83fad42');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8a72905e-add2-4d5c-b304-18c3253a4adb\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8a72905e-add2-4d5c-b304-18c3253a4adb')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8a72905e-add2-4d5c-b304-18c3253a4adb button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1340,\n  \"fields\": [\n    {\n      \"column\": \"gp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 11,\n        \"max\": 82,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          51,\n          36,\n          25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.307963702156531,\n        \"min\": 3.1,\n        \"max\": 40.9,\n        \"num_unique_values\": 325,\n        \"samples\": [\n          37.5,\n          21.2,\n          38.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.357544941826067,\n        \"min\": 0.7,\n        \"max\": 28.2,\n        \"num_unique_values\": 191,\n        \"samples\": [\n          10.2,\n          9.7,\n          22.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.137678873846979,\n        \"min\": 23.8,\n        \"max\": 73.7,\n        \"num_unique_values\": 284,\n        \"samples\": [\n          38.3,\n          25.0,\n          52.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"3p\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.051860729223097,\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 254,\n        \"samples\": [\n          10.5,\n          50.0,\n          29.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.578479425036832,\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 383,\n        \"samples\": [\n          50.7,\n          57.7,\n          38.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reb\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0577740415847043,\n        \"min\": 0.3,\n        \"max\": 13.9,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          7.0,\n          1.6,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ast\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4711691901022694,\n        \"min\": 0.0,\n        \"max\": 10.6,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          0.3,\n          2.0,\n          0.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stl\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4097586813504082,\n        \"min\": 0.0,\n        \"max\": 2.5,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          1.5,\n          1.7,\n          0.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"blk\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4290490953157915,\n        \"min\": 0.0,\n        \"max\": 3.9,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          1.5,\n          1.6,\n          1.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tov\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7225405379316505,\n        \"min\": 0.1,\n        \"max\": 4.4,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          3.3,\n          2.5,\n          0.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target_5yrs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_points\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 366.5200932750822,\n        \"min\": 14.7,\n        \"max\": 2312.4,\n        \"num_unique_values\": 1028,\n        \"samples\": [\n          79.2,\n          100.80000000000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"efficiency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09365858450391282,\n        \"min\": 0.1219512195121951,\n        \"max\": 0.7384615384615384,\n        \"num_unique_values\": 1162,\n        \"samples\": [\n          0.31155778894472363,\n          0.30188679245283023\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Prepare for naive bayes model later which means that the features have to be independent of each other.  if features are aggregated to make new features, it may be necessary to remove the original features"
      ],
      "metadata": {
        "id": "U8DIOYHDUG_U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(columns =['gp','pts','min'], inplace=True)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "PvcehLemTlaC",
        "outputId": "feb8a47c-d262-416c-85fa-732fa56902ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     fg    3p    ft  reb  ast  stl  blk  tov  target_5yrs  total_points  \\\n",
              "0  34.7  25.0  69.9  4.1  1.9  0.4  0.4  1.3            0         266.4   \n",
              "1  29.6  23.5  76.5  2.4  3.7  1.1  0.5  1.6            0         252.0   \n",
              "2  42.2  24.4  67.0  2.2  1.0  0.5  0.3  1.0            0         384.8   \n",
              "3  42.6  22.6  68.9  1.9  0.8  0.6  0.1  1.0            1         330.6   \n",
              "4  52.4   0.0  67.4  2.5  0.3  0.3  0.4  0.8            1         216.0   \n",
              "\n",
              "   efficiency  \n",
              "0    0.270073  \n",
              "1    0.267658  \n",
              "2    0.339869  \n",
              "3    0.491379  \n",
              "4    0.391304  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-623ff2d5-2f0d-4507-81ed-96478fa56066\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fg</th>\n",
              "      <th>3p</th>\n",
              "      <th>ft</th>\n",
              "      <th>reb</th>\n",
              "      <th>ast</th>\n",
              "      <th>stl</th>\n",
              "      <th>blk</th>\n",
              "      <th>tov</th>\n",
              "      <th>target_5yrs</th>\n",
              "      <th>total_points</th>\n",
              "      <th>efficiency</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>34.7</td>\n",
              "      <td>25.0</td>\n",
              "      <td>69.9</td>\n",
              "      <td>4.1</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.4</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0</td>\n",
              "      <td>266.4</td>\n",
              "      <td>0.270073</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>29.6</td>\n",
              "      <td>23.5</td>\n",
              "      <td>76.5</td>\n",
              "      <td>2.4</td>\n",
              "      <td>3.7</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>1.6</td>\n",
              "      <td>0</td>\n",
              "      <td>252.0</td>\n",
              "      <td>0.267658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>42.2</td>\n",
              "      <td>24.4</td>\n",
              "      <td>67.0</td>\n",
              "      <td>2.2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>384.8</td>\n",
              "      <td>0.339869</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>42.6</td>\n",
              "      <td>22.6</td>\n",
              "      <td>68.9</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0.1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>330.6</td>\n",
              "      <td>0.491379</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>52.4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>67.4</td>\n",
              "      <td>2.5</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.8</td>\n",
              "      <td>1</td>\n",
              "      <td>216.0</td>\n",
              "      <td>0.391304</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-623ff2d5-2f0d-4507-81ed-96478fa56066')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-623ff2d5-2f0d-4507-81ed-96478fa56066 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-623ff2d5-2f0d-4507-81ed-96478fa56066');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f46f0af3-306b-451b-a4f5-0661d0898074\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f46f0af3-306b-451b-a4f5-0661d0898074')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f46f0af3-306b-451b-a4f5-0661d0898074 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1340,\n  \"fields\": [\n    {\n      \"column\": \"fg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.137678873846979,\n        \"min\": 23.8,\n        \"max\": 73.7,\n        \"num_unique_values\": 284,\n        \"samples\": [\n          38.3,\n          25.0,\n          52.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"3p\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.051860729223097,\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 254,\n        \"samples\": [\n          10.5,\n          50.0,\n          29.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.578479425036832,\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 383,\n        \"samples\": [\n          50.7,\n          57.7,\n          38.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reb\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0577740415847043,\n        \"min\": 0.3,\n        \"max\": 13.9,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          7.0,\n          1.6,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ast\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4711691901022694,\n        \"min\": 0.0,\n        \"max\": 10.6,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          0.3,\n          2.0,\n          0.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stl\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4097586813504082,\n        \"min\": 0.0,\n        \"max\": 2.5,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          1.5,\n          1.7,\n          0.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"blk\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4290490953157915,\n        \"min\": 0.0,\n        \"max\": 3.9,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          1.5,\n          1.6,\n          1.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tov\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7225405379316505,\n        \"min\": 0.1,\n        \"max\": 4.4,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          3.3,\n          2.5,\n          0.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target_5yrs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_points\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 366.5200932750822,\n        \"min\": 14.7,\n        \"max\": 2312.4,\n        \"num_unique_values\": 1028,\n        \"samples\": [\n          79.2,\n          100.80000000000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"efficiency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09365858450391282,\n        \"min\": 0.1219512195121951,\n        \"max\": 0.7384615384615384,\n        \"num_unique_values\": 1162,\n        \"samples\": [\n          0.31155778894472363,\n          0.30188679245283023\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**naive bayes model**\n",
        "\n"
      ],
      "metadata": {
        "id": "T5qjGngYgCUD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import naive_bayes\n",
        "from sklearn import model_selection\n",
        "from sklearn import metrics"
      ],
      "metadata": {
        "id": "NB6WTlTBeuv_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y = df.target_5yrs\n",
        "X = df.drop(columns='target_5yrs', axis=1)"
      ],
      "metadata": {
        "id": "Z0LIxzf2iZ5C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# the data indicates that all the predictor variables are continuous numerical values so we will select a model to suit this\n",
        "X.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "SNsVpJZHih5O",
        "outputId": "f206beb8-c921-4e9a-ff8e-34e85e223c23"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     fg    3p    ft  reb  ast  stl  blk  tov  total_points  efficiency\n",
              "0  34.7  25.0  69.9  4.1  1.9  0.4  0.4  1.3         266.4    0.270073\n",
              "1  29.6  23.5  76.5  2.4  3.7  1.1  0.5  1.6         252.0    0.267658\n",
              "2  42.2  24.4  67.0  2.2  1.0  0.5  0.3  1.0         384.8    0.339869\n",
              "3  42.6  22.6  68.9  1.9  0.8  0.6  0.1  1.0         330.6    0.491379\n",
              "4  52.4   0.0  67.4  2.5  0.3  0.3  0.4  0.8         216.0    0.391304"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9dd912f4-2dac-47a3-a0f1-ab308ce4df64\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fg</th>\n",
              "      <th>3p</th>\n",
              "      <th>ft</th>\n",
              "      <th>reb</th>\n",
              "      <th>ast</th>\n",
              "      <th>stl</th>\n",
              "      <th>blk</th>\n",
              "      <th>tov</th>\n",
              "      <th>total_points</th>\n",
              "      <th>efficiency</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>34.7</td>\n",
              "      <td>25.0</td>\n",
              "      <td>69.9</td>\n",
              "      <td>4.1</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.4</td>\n",
              "      <td>1.3</td>\n",
              "      <td>266.4</td>\n",
              "      <td>0.270073</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>29.6</td>\n",
              "      <td>23.5</td>\n",
              "      <td>76.5</td>\n",
              "      <td>2.4</td>\n",
              "      <td>3.7</td>\n",
              "      <td>1.1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>1.6</td>\n",
              "      <td>252.0</td>\n",
              "      <td>0.267658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>42.2</td>\n",
              "      <td>24.4</td>\n",
              "      <td>67.0</td>\n",
              "      <td>2.2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>384.8</td>\n",
              "      <td>0.339869</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>42.6</td>\n",
              "      <td>22.6</td>\n",
              "      <td>68.9</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.8</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0.1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>330.6</td>\n",
              "      <td>0.491379</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>52.4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>67.4</td>\n",
              "      <td>2.5</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0.8</td>\n",
              "      <td>216.0</td>\n",
              "      <td>0.391304</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9dd912f4-2dac-47a3-a0f1-ab308ce4df64')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9dd912f4-2dac-47a3-a0f1-ab308ce4df64 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9dd912f4-2dac-47a3-a0f1-ab308ce4df64');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e1f049dc-85aa-4e04-b3e9-ddec76468c40\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e1f049dc-85aa-4e04-b3e9-ddec76468c40')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e1f049dc-85aa-4e04-b3e9-ddec76468c40 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X",
              "summary": "{\n  \"name\": \"X\",\n  \"rows\": 1340,\n  \"fields\": [\n    {\n      \"column\": \"fg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.137678873846979,\n        \"min\": 23.8,\n        \"max\": 73.7,\n        \"num_unique_values\": 284,\n        \"samples\": [\n          38.3,\n          25.0,\n          52.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"3p\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.051860729223097,\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 254,\n        \"samples\": [\n          10.5,\n          50.0,\n          29.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.578479425036832,\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 383,\n        \"samples\": [\n          50.7,\n          57.7,\n          38.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reb\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0577740415847043,\n        \"min\": 0.3,\n        \"max\": 13.9,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          7.0,\n          1.6,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ast\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4711691901022694,\n        \"min\": 0.0,\n        \"max\": 10.6,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          0.3,\n          2.0,\n          0.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stl\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4097586813504082,\n        \"min\": 0.0,\n        \"max\": 2.5,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          1.5,\n          1.7,\n          0.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"blk\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4290490953157915,\n        \"min\": 0.0,\n        \"max\": 3.9,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          1.5,\n          1.6,\n          1.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tov\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7225405379316505,\n        \"min\": 0.1,\n        \"max\": 4.4,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          3.3,\n          2.5,\n          0.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_points\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 366.5200932750822,\n        \"min\": 14.7,\n        \"max\": 2312.4,\n        \"num_unique_values\": 1028,\n        \"samples\": [\n          79.2,\n          100.80000000000001,\n          135.29999999999998\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"efficiency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09365858450391282,\n        \"min\": 0.1219512195121951,\n        \"max\": 0.7384615384615384,\n        \"num_unique_values\": 1162,\n        \"samples\": [\n          0.31155778894472363,\n          0.30188679245283023,\n          0.3693693693693693\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# split the data\n",
        "\n",
        "X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.25, random_state=42)\n"
      ],
      "metadata": {
        "id": "VLeX6liBinCW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**what naive bayes model should we use**\n",
        "\n",
        "under the assumption that the features are normally distributed and continuous, the gaussian algorith is best"
      ],
      "metadata": {
        "id": "8bfHdzS4i8cp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# fit the model to the training data and predict on the test data\n",
        "\n",
        "nb = naive_bayes.GaussianNB()\n",
        "nb.fit(X_train, y_train)\n",
        "y_pred = nb.predict(X_test)"
      ],
      "metadata": {
        "id": "bYIvkkTki5Pj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# lets look at the model performance:\n",
        "\n",
        "metric_funcs = {\n",
        "    'accuracy score': metrics.accuracy_score,\n",
        "    'precision score': metrics.precision_score,\n",
        "    'recall score': metrics.recall_score,\n",
        "    'f1 score': metrics.f1_score\n",
        "}\n",
        "\n",
        "# Loop through the dictionary and print each score\n",
        "for name, func in metric_funcs.items():\n",
        "    print(f'{name}:', func(y_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EiO-0r9AjRad",
        "outputId": "d01d3ecb-47fb-4166-c200-af18fdf50eea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "accuracy score: 0.6537313432835821\n",
            "precision score: 0.8382352941176471\n",
            "recall score: 0.5480769230769231\n",
            "f1 score: 0.6627906976744186\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "| **Metric**   | **Value** | **Interpretation** |\n",
        "|--------------|-----------|---------------------|\n",
        "| Accuracy     | 0.6537    | About 65% of all predictions were correct overall. Not bad, but room for improvement. |\n",
        "| Precision    | 0.8382    | When the model predicted the positive class, it was correct 84% of the time. This suggests few false positives. |\n",
        "| Recall       | 0.5481    | The model captured only 55% of the actual positive cases. This indicates many false negatives were missed. |\n",
        "| F1 Score     | 0.6628    | The harmonic mean of precision and recall. It's a balance between the two, and at 66%, suggests moderate overall quality, leaning toward high precision but lower recall. |\n"
      ],
      "metadata": {
        "id": "kcljSVVfkG-G"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "ðŸ’¡ What This Tells You\n",
        "Your model is conservative in predicting the positive class (high precision) but misses a lot of actual positives (low recall).\n",
        "\n",
        "This behavior is acceptable when false positives are costly (e.g., spam filters, fraud detection alerts).\n",
        "\n",
        "But itâ€™s not ideal in scenarios like medical diagnosis, where missing actual positives can be risky."
      ],
      "metadata": {
        "id": "pvPNAlYYkWcO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# evaluate visually with a confusion matrix\n",
        "\n",
        "cm = metrics.confusion_matrix(y_test, y_pred)\n",
        "disp = metrics.ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=nb.classes_)\n",
        "disp.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "cVjkk897kcEo",
        "outputId": "0399c8f5-1bfd-42e6-972f-be1313546378"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7b83d28eded0>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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AgDUF8kevyk6Olo9e/bUypUrvWMej0crV65UdnZ2CCMDANRHVKgDQHgYOXKk8vPz1atXL5133nmaNWuWKioqNGjQoFCHBlhWXl6u7du3ez8XFRVp06ZNSk1NVZs2bUIYGRAY3HqHenv66af1yCOPqKSkRD169FBhYaGysrJCHRZg2XvvvafevXvXGc/Pz9eCBQsaPiAgwEj2AADYHHP2AADYHMkeAACbI9kDAGBzJHsAAGyOZA8AgM2R7AEAsDmSPQAANkeyBwDA5kj2gEW33HKL+vfv7/182WWXafjw4Q0ex3vvvSfDMHTw4METHmMYhpYsWVLva06cOFE9evSwFNc333wjwzC0adMmS9cBcPJI9rClW265RYZhyDAMRUdHq0OHDpo8ebKOHj0a9O9+/fXXNWXKlHodW58EDQBW8SIc2NZVV12l+fPnq6qqSm+99ZbuvvtuNWnSROPGjatzbHV1taKjowPyvampqQG5DgAECpU9bCsmJkZpaWlq27at7rzzTuXk5OjNN9+U9HPrfdq0aUpPT1enTp0kScXFxbrxxhvVtGlTpaamql+/fvrmm2+813S73Ro5cqSaNm2qU045RaNHj9YvXy/xyzZ+VVWVxowZo4yMDMXExKhDhw56/vnn9c0333hfvtKsWTMZhqFbbrlFUu0rhGfMmKHMzEzFxcWpe/fu+uc//+nzPW+99ZZOP/10xcXFqXfv3j5x1teYMWN0+umnKz4+Xu3bt1dBQYFqamrqHPfMM88oIyND8fHxuvHGG3Xo0CGf/c8995y6dOmi2NhYde7cWX//+9/9jgVA8JDs4RhxcXGqrq72fl65cqW2bt2qFStWaNmyZaqpqVFubq6SkpK0evVqffjhh0pMTNRVV13lPe+xxx7TggUL9MILL+iDDz7QgQMH9MYbb/zq9/7lL3/RSy+9pMLCQm3ZskXPPPOMEhMTlZGRoddee02StHXrVu3bt09PPvmkJGnGjBlauHCh5s6dqy+++EIjRozQzTffrPfff19S7R8lAwYMUN++fbVp0ybddtttGjt2rN//myQlJWnBggX68ssv9eSTT2revHl64oknfI7Zvn27Xn31VS1dulTLly/Xp59+qrvuusu7f9GiRRo/frymTZumLVu2aPr06SooKNCLL77odzwAgsQEbCg/P9/s16+faZqm6fF4zBUrVpgxMTHmqFGjvPtdLpdZVVXlPecf//iH2alTJ9Pj8XjHqqqqzLi4OPOdd94xTdM0W7VqZc6cOdO7v6amxmzdurX3u0zTNC+99FJz2LBhpmma5tatW01J5ooVK44b57///W9TkvnDDz94xyorK834+HhzzZo1PscOHjzYvOmmm0zTNM1x48aZXbt29dk/ZsyYOtf6JUnmG2+8ccL9jzzyiNmzZ0/v5wkTJpiRkZHm7t27vWNvv/22GRERYe7bt880TdM87bTTzMWLF/tcZ8qUKWZ2drZpmqZZVFRkSjI//fTTE34vgOBizh62tWzZMiUmJqqmpkYej0d/+tOfNHHiRO/+bt26+czTb968Wdu3b1dSUpLPdSorK7Vjxw4dOnRI+/btU1ZWlndfVFSUevXqVaeVf8ymTZsUGRmpSy+9tN5xb9++XUeOHNEVV1zhM15dXa2zzz5bkrRlyxafOCQpOzu73t9xzCuvvKLCwkLt2LFD5eXlOnr0qJKTk32OadOmjU499VSf7/F4PNq6dauSkpK0Y8cODR48WEOGDPEec/ToUaWkpPgdD4DgINnDtnr37q05c+YoOjpa6enpiory/XVPSEjw+VxeXq6ePXtq0aJFda7VokWLk4ohLi7O73PKy8slSf/61798kqxUuw4hUNauXau8vDxNmjRJubm5SklJ0csvv6zHHnvM71jnzZtX54+PyMjIgMUKwBqSPWwrISFBHTp0qPfx55xzjl555RW1bNmyTnV7TKtWrbRu3Tpdcsklkmor2A0bNuicc8457vHdunWTx+PR+++/r5ycnDr7j3UW3G63d6xr166KiYnRrl27TtgR6NKli3ex4TEfffTRb/+Q/8uaNWvUtm1bPfDAA96xb7/9ts5xu3bt0t69e5Wenu79noiICHXq1Ekul0vp6enauXOn8vLy/Pp+AA2HBXrAT/Ly8tS8eXP169dPq1evVlFRkd577z3de++92r17tyRp2LBheuihh7RkyRJ99dVXuuuuu371Hvl27dopPz9ft956q5YsWeK95quvvipJatu2rQzD0LJly/Tdd9+pvLxcSUlJGjVqlEaMGKEXX3xRO3bs0MaNG/XUU095F73dcccd+vrrr3X//fdr69atWrx4sRYsWODXz9uxY0ft2rVLL7/8snbs2KHCwsLjLjaMjY1Vfn6+Nm/erNWrV+vee+/VjTfeqLS0NEnSpEmTNGPGDBUWFmrbtm367LPPNH/+fD3++ON+xQMgeEj2wE/i4+O1atUqtWnTRgMGDFCXLl00ePBgVVZWeiv9++67T3/+85+Vn5+v7OxsJSUl6fe///2vXnfOnDm64YYbdNddd6lz584aMmSIKioqJEmnnnqqJk2apLFjx8rlcmno0KGSpClTpqigoEAzZsxQly5ddNVVV+lf//qXMjMzJdXOo7/22mtasmSJunfvrrlz52r69Ol+/bzXXXedRowYoaFDh6pHjx5as2aNCgoK6hzXoUMHDRgwQFdffbWuvPJKnXXWWT631t1222167rnnNH/+fHXr1k2XXnqpFixY4I0VQOgZ5olWFgEAAFugsgcAwOZI9gAA2BzJHgAAmyPZAwBgcyR7AABsjmQPAIDNkewBALA5kj0AADZHsgcAwOZI9gAA2BzJHgAAm/v/qtMv3tcZpjgAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**How would you present your results to your team?**\n",
        "- Showcase the data used to create the prediction and the performance of the model overall.\n",
        "- Review the sample output of the features and the confusion matrix to indicate the model's performance.\n",
        "- Highlight the metric values, emphasizing the F1 score.\n",
        "\n",
        "**How would you summarize your findings to stakeholders?**\n",
        "- The model created provides some value in predicting an NBA player's chances of playing for five years or more.\n",
        "- Notably, the model performed better at predicting true positives than it did at predicting true negatives. In other words, it more accurately identified those players who will likely play for more than five years than it did those who likely will not."
      ],
      "metadata": {
        "id": "ReegIwlPkuD7"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "NLE4t3LDkuqV"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
